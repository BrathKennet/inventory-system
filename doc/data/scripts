/* Create tables */

create table
  public.categories (
    id uuid not null default gen_random_uuid (),
    name text not null,
    constraint category_pkey primary key (id)
  ) tablespace pg_default;

create table
  public.suppliers (
    id uuid not null default gen_random_uuid (),
    name text not null,
    address text not null,
    phone text not null,
    email text null default ''::text,
    constraint suppliers_pkey primary key (id)
  ) tablespace pg_default;

create table
  public.clients (
    id uuid not null default gen_random_uuid (),
    name text not null,
    address text null default ''::text,
    phone text not null,
    email text not null,
    constraint clients_pkey primary key (id)
  ) tablespace pg_default;

create table
  public.lots (
    id uuid not null default gen_random_uuid (),
    stock smallint not null,
    sale_price_unit real not null,
    purchase_quantity smallint not null,
    purchase_price_unit real not null,
    purchase_date date not null,
    expiration_date date not null,
    id_product uuid not null,
    id_supplier uuid not null,
    constraint lots_pkey primary key (id),
    constraint public_lots_id_product_fkey foreign key (id_product) references products (id),
    constraint public_lots_id_supplier_fkey foreign key (id_supplier) references suppliers (id)
  ) tablespace pg_default;

create table
  public.products (
    id uuid not null default gen_random_uuid (),
    name text not null,
    description text not null,
    id_category uuid not null,
    constraint products_pkey primary key (id),
    constraint public_products_id_category_fkey foreign key (id_category) references categories (id)
  ) tablespace pg_default;

create table
  public.sales (
    id uuid not null default gen_random_uuid (),
    quantity_sold smallint not null,
    total_sold real not null,
    sale_date date not null,
    id_client uuid not null,
    detail json[] not null,
    constraint sales_pkey primary key (id),
    constraint public_sales_id_client_fkey foreign key (id_client) references clients (id)
  ) tablespace pg_default;

create table
  public.type_transaction (
    id smallint generated by default as identity,
    name text not null,
    constraint type_transaction_pkey primary key (id)
  ) tablespace pg_default;

create table
  public.transactions (
    id uuid not null default gen_random_uuid (),
    quantity smallint not null,
    transaction_date date not null,
    id_type smallint not null,
    id_product text not null,
    name_product text not null,
    constraint transactions_pkey primary key (id),
    constraint public_transactions_id_type_fkey foreign key (id_type) references type_transaction (id)
  ) tablespace pg_default;


/* Create functions */
create
or replace function get_all_products_categories_stock () returns table (
  id uuid,
  name text,
  description text,
  id_category uuid,
  name_category text,
  total_stock integer
) as $$
  select p.*, c.name as name_category, coalesce(sum(l.stock), 0) as total_stock
  from products as p
  join categories as c
  on p.id_category = c.id
  left join lots as l
  on p.id = l.id_product
  group by p.id, c.name;
$$ language sql;

create
or replace function get_all_categories_count_product () returns table (
  id uuid,
  name text,
  product_count integer
) as $$
  select c.*, count(p.id) as product_count
  from categories as c
  left join products as p
  on c.id = p.id_category
  group by c.id;
$$ language sql;

create
or replace function get_all_lots_products_suppliers () returns table (
  id uuid,
  stock smallint,
  sale_price_unit real,
  purchase_quantity smallint,
  purchase_price_unit real,
  purchase_date date,
  expiration_date date,
  id_product uuid,
  id_supplier uuid,
  name_product text,
  name_supplier text
) as $$
  select l.*, p.name as name_product, s.name as name_supplier
  from lots as l
  join products as p
  on l.id_product = p.id
  join suppliers as s
  on l.id_supplier = s.id;
$$ language sql;

create
or replace function get_all_sales_clients () returns table (
  id uuid,
  quantity_sold smallint,
  total_sold real,
  sale_date date,
  id_client uuid,
  detail json[],
  name_client text
) as $$
  select s.*, c.name as name_client
  from sales as s
  join clients as c
  on s.id_client = c.id;
$$ language sql;

create or replace function count_sales (query text) returns table (
  count integer
) as $$
  select count(*) from get_all_sales_clients()
    where name_client ILIKE '%' || query || '%';
$$ language sql;

create or replace function count_lots (query text) returns table (
  count integer
) as $$
  select count(*) from get_all_lots_products_suppliers()
    where name_product ILIKE '%' || query || '%' OR name_supplier ILIKE '%' || query || '%';
$$ language sql;

create or replace function get_table_totals()
returns json AS $$
declare
    total_categories integer;
    total_clients integer;
    total_lots integer;
    total_products integer;
    total_sales integer;
    total_suppliers integer;
begin
    select count(*) into total_categories from categories;
    select count(*) into total_clients from clients;
    select count(*) into total_lots from lots;
    select count(*) into total_products from products;
    select count(*) into total_sales from sales;
    select count(*) into total_suppliers from suppliers;

    return json_build_object(
        'total_categories', total_categories,
        'total_clients', total_clients,
        'total_lots', total_lots,
        'total_products', total_products,
        'total_sales', total_sales,
        'total_suppliers', total_suppliers
    );
end;
$$ language plpgsql;


ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE suppliers ENABLE ROW LEVEL SECURITY;
ALTER TABLE clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE lots ENABLE ROW LEVEL SECURITY;
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE sales ENABLE ROW LEVEL SECURITY;
ALTER TABLE type_transaction ENABLE ROW LEVEL SECURITY;
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;